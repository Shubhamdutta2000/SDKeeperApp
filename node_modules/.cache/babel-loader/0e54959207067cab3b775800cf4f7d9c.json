{"ast":null,"code":"import _objectSpread from \"P:\\\\keeper-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"P:\\\\keeper-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"P:\\\\keeper-app\\\\src\\\\components\\\\Input.jsx\";\nimport React, { useState } from \"react\";\n\nfunction InputArea(props) {\n  var _useState = useState({\n    title: \"\",\n    content: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      note = _useState2[0],\n      setNote = _useState2[1];\n\n  function handleChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setNote(function (prevValue) {\n      return _objectSpread(_objectSpread({}, prevValue), {}, {\n        [name]: value\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: function onSubmit(event) {\n      props.onAdd(note);\n      event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange,\n    name: \"title\",\n    placeholder: \"Title...\",\n    value: note.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: handleChange,\n    name: \"content\",\n    placeholder: \"Content...\",\n    value: note.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Add\"));\n}\n\nexport default InputArea; //CHALLENGE:\n//1. Implement the add note functionality.\n//- Create a constant that keeps track of the title and content.\n//- Pass the new note back to the App.\n//- Add new note to an array.\n//- Take array and render seperate Note components for each item.\n//2. Implement the delete note functionality.\n//- Callback from the Note component to trigger a delete function.\n//- Use the filter function to filter out the item that needs deletion.\n//- Pass a id over to the Note component, pass it back to the App when deleting.\n//This is the end result you're aiming for:\n//https://pogqj.csb.app/","map":{"version":3,"sources":["P:/keeper-app/src/components/Input.jsx"],"names":["React","useState","InputArea","props","title","content","note","setNote","handleChange","event","target","name","value","prevValue","onAdd","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,kBACAF,QAAQ,CAAC;AAC/BG,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,OAAO,EAAE;AAFsB,GAAD,CADR;AAAA;AAAA,MACjBC,IADiB;AAAA,MACXC,OADW;;AAMxB,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,wBACHA,KAAK,CAACC,MADH;AAAA,QACnBC,IADmB,iBACnBA,IADmB;AAAA,QACbC,KADa,iBACbA,KADa;AAE3BL,IAAAA,OAAO,CAAC,UAACM,SAAD,EAAe;AACrB,6CACKA,SADL;AAEE,SAACF,IAAD,GAAQC;AAFV;AAID,KALM,CAAP;AAMD;;AACD,sBACE;AACE,IAAA,QAAQ,EAAE,kBAACH,KAAD,EAAW;AACbN,MAAAA,KAAK,CAACW,KAAN,CAAYR,IAAZ;AACAG,MAAAA,KAAK,CAACM,cAAN;AACP,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AACE,IAAA,QAAQ,EAAEP,YADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,UAHd;AAIE,IAAA,KAAK,EAAEF,IAAI,CAACF,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAYE;AACE,IAAA,QAAQ,EAAEI,YADZ;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,WAAW,EAAC,YAHd;AAIE,IAAA,KAAK,EAAEF,IAAI,CAACD,OAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAlBF,CADF;AAsBD;;AAED,eAAeH,SAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction InputArea(props) {\r\n  const [note, setNote] = useState({\r\n    title: \"\",\r\n    content: \"\",\r\n  });\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n    setNote((prevValue) => {\r\n      return {\r\n        ...prevValue,\r\n        [name]: value,\r\n      };\r\n    });\r\n  }\r\n  return (\r\n    <form\r\n      onSubmit={(event) => {\r\n              props.onAdd(note);\r\n              event.preventDefault()\r\n      }}\r\n    >\r\n      <input\r\n        onChange={handleChange}\r\n        name=\"title\"\r\n        placeholder=\"Title...\"\r\n        value={note.title}\r\n      />\r\n      <textarea\r\n        onChange={handleChange}\r\n        name=\"content\"\r\n        placeholder=\"Content...\"\r\n        value={note.content}\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default InputArea;\r\n\r\n//CHALLENGE:\r\n//1. Implement the add note functionality.\r\n//- Create a constant that keeps track of the title and content.\r\n//- Pass the new note back to the App.\r\n//- Add new note to an array.\r\n//- Take array and render seperate Note components for each item.\r\n\r\n//2. Implement the delete note functionality.\r\n//- Callback from the Note component to trigger a delete function.\r\n//- Use the filter function to filter out the item that needs deletion.\r\n//- Pass a id over to the Note component, pass it back to the App when deleting.\r\n\r\n//This is the end result you're aiming for:\r\n//https://pogqj.csb.app/\r\n"]},"metadata":{},"sourceType":"module"}