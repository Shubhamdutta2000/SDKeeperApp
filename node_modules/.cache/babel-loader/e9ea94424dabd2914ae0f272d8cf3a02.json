{"ast":null,"code":"import _toConsumableArray from \"P:\\\\keeper-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"P:\\\\keeper-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"P:\\\\keeper-app\\\\src\\\\components\\\\App.jsx\";\nimport React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Note from \"./Note\";\nimport Footer from \"./Footer\";\nimport InputArea from \"./Input\";\n\nfunction App() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      notes = _useState2[0],\n      setNotes = _useState2[1];\n\n  function handleSubmit(newNote) {\n    console.log(newNote);\n    setNotes(function (prevValue) {\n      console.log(prevValue);\n      return [].concat(_toConsumableArray(prevValue), [newNote]);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(InputArea, {\n    onAdd: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }), notes.map(function (noteItem, index) {\n    return /*#__PURE__*/React.createElement(Note, {\n      key: index,\n      title: noteN.title,\n      content: note.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App; //CHALLENGE:\n//1. Implement the add note functionality.\n//- Create a constant that keeps track of the title and content.\n//- Pass the new note back to the App.\n//- Add new note to an array.\n//- Take array and render seperate Note components for each item.\n//2. Implement the delete note functionality.\n//- Callback from the Note component to trigger a delete function.\n//- Use the filter function to filter out the item that needs deletion.\n//- Pass a id over to the Note component, pass it back to the App when deleting.\n//This is the end result you're aiming for:\n//https://pogqj.csb.app/","map":{"version":3,"sources":["P:/keeper-app/src/components/App.jsx"],"names":["React","useState","Header","Note","Footer","InputArea","App","notes","setNotes","handleSubmit","newNote","console","log","prevValue","map","noteItem","index","noteN","title","note","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,SAAtB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAAA,kBACaL,QAAQ,CAAC,EAAD,CADrB;AAAA;AAAA,MACNM,KADM;AAAA,MACCC,QADD;;AAGb,WAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAF,IAAAA,QAAQ,CAAC,UAACK,SAAD,EAAe;AACtBF,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACA,0CAAWA,SAAX,IAAsBH,OAAtB;AACD,KAHO,CAAR;AAID;;AACD,sBACE,uDACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAED,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGGF,KAAK,CAACO,GAAN,CAAU,UAACC,QAAD,EAAWC,KAAX;AAAA,wBACT,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,KAAX;AAAkB,MAAA,KAAK,EAAEC,KAAK,CAACC,KAA/B;AAAsC,MAAA,OAAO,EAAEC,IAAI,CAACC,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS;AAAA,GAAV,CAHH,eAME,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD;;AAED,eAAed,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Note from \"./Note\";\r\nimport Footer from \"./Footer\";\r\nimport InputArea from \"./Input\";\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  function handleSubmit(newNote) {\r\n    console.log(newNote);\r\n    setNotes((prevValue) => {\r\n      console.log(prevValue);\r\n      return [...prevValue, newNote];\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <Header />\r\n      <InputArea onAdd={handleSubmit} />\r\n      {notes.map((noteItem, index) => (\r\n        <Note key={index} title={noteN.title} content={note.content} />\r\n      ))}\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n//CHALLENGE:\r\n//1. Implement the add note functionality.\r\n//- Create a constant that keeps track of the title and content.\r\n//- Pass the new note back to the App.\r\n//- Add new note to an array.\r\n//- Take array and render seperate Note components for each item.\r\n\r\n//2. Implement the delete note functionality.\r\n//- Callback from the Note component to trigger a delete function.\r\n//- Use the filter function to filter out the item that needs deletion.\r\n//- Pass a id over to the Note component, pass it back to the App when deleting.\r\n\r\n//This is the end result you're aiming for:\r\n//https://pogqj.csb.app/\r\n"]},"metadata":{},"sourceType":"module"}